#!/usr/bin/env python
import base64
import collections
import csv
import datetime
import glob
import io
import json
import os
import statistics
import sys
import typing

import lxml.html
from lxml.html import builder as E
import matplotlib.pyplot
import numpy


def float_to_str(f):
    # type: (float) -> str
    return str(round(f, 2))


def build_multi_bar_figure(categories, data, ylabel, title):
    # categories: [27, 35, 36, 37, 38, 39]
    # data: [{variant: x, variant: y}, ... ]
    fig, ax = matplotlib.pyplot.subplots()

    cat_names = sorted(categories)
    sub_cat_names = sorted(data[0].keys())

    x = numpy.arange(len(sub_cat_names))
    width = 0.5 / len(cat_names)

    for i, sub_cats in enumerate(data):
        points = []
        for cat in sub_cat_names:
            points.append(sub_cats[cat])

        ax.barh(
            x + (width * (i + 1)),
            points,
            width,
            label=cat_names[i],
        )

    ax.set_xlabel(ylabel)
    ax.set_yticks(x + (width * (len(cat_names) / 2)))
    ax.set_yticklabels(sub_cat_names)
    ax.legend()
    ax.set_title(title)

    with io.BytesIO() as out:
        fig.savefig(out, bbox_inches="tight", dpi=300)
        return base64.b64encode(out.getvalue())


def print_row(fields, centered=False):
    # type: (typing.List[str]) -> None
    placeholders = ["|{:^25} " if centered else "|{:>25} "] * len(fields)
    format_str = "".join(placeholders) + "|"
    print(format_str.format(*fields))


def print_spacer(n):
    # type: (int) -> None
    spacer = "-" * 26
    spacers = ["|{}".format(spacer)] * n
    print("".join(spacers) + "|")


def print_results(data):
    # type: (typing.Dict[str, typing.Any]) -> None
    cli_headings = (
        "Python",
        "Variant",
        "Iterations",
        "Instructions",
        "max.res mean",
        "wall.time mean",
    )
    for suite, pythons in data.items():
        print("\r\nSuite: {}".format(suite))
        print_row(cli_headings, centered=True)
        for python_version, variants in sorted(pythons.items()):
            print_spacer(len(cli_headings))
            for i, (variant, results) in enumerate(sorted(variants.items())):
                py = python_version if i == 0 else ""
                print_row(
                    (
                        py,
                        variant,
                        results["iterations"],
                        results["instructions"],
                        "{:>10} ±{:<10}".format(
                            round(results["max.res.size"]["mean"], 2),
                            round(results["max.res.size"]["stdev"], 2),
                        ),
                        "{:>10} ±{:<10}".format(
                            round(results["wall.time"]["mean"], 2),
                            round(results["wall.time"]["stdev"], 2),
                        ),
                    ),
                )


def write_json(base_dir, data):
    # type: (str, typing.Dict[str, typing.Any]) -> str
    out_json = os.path.join(base_dir, "combined.json")
    with open(out_json, "w") as fp:
        json.dump(data, fp)
    return out_json


def write_html(base_dir, data):
    # type: (str, typing.Dict[str, typing.Any]) -> str
    # Build an html element
    html = E.HTML(
        E.HEAD(
            E.META(charset="UTF-8"),
            E.LINK(
                rel="stylesheet",
                href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.2/css/bulma.min.css",
                integrity="sha512-byErQdWdTqREz6DLAA9pCnLbdoGGhXfU6gm1c8bkf7F51JVmUBlayGe2A31VpXWQP+eiJ3ilTAZHCR3vmMyybA==",
                crossorigin="anonymous",
            ),
            E.LINK(
                rel="stylesheet",
                href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/default.min.css",
                integrity="sha512-kZqGbhf9JTB4bVJ0G8HCkqmaPcRgo88F0dneK30yku5Y/dep7CZfCnNml2Je/sY4lBoqoksXz4PtVXS4GHSUzQ==",
                crossorigin="anonymous",
            ),
            E.SCRIPT(
                src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js",
                integrity="sha512-s+tOYYcC3Jybgr9mVsdAxsRYlGNq4mlAurOrfNuGMQ/SCofNPu92tjE7YRZCsdEtWL1yGkqk15fU/ark206YTg==",
                crossorigin="anonymous",
            ),
        ),
        E.BODY(),
        E.SCRIPT("hljs.highlightAll();"),
        lang="en",
    )

    # Generate figures
    matplotlib.pyplot.rcdefaults()
    for suite, pythons in data.items():

        python_names = sorted(pythons.keys())
        instructions = []
        max_res_size = []
        wall_time = []

        results_tables = []
        for python in python_names:
            variants = pythons[python]
            instructions.append(dict((variant, data["instructions"]) for variant, data in variants.items()))
            max_res_size.append(dict((variant, data["max.res.size"]["mean"]) for variant, data in variants.items()))
            wall_time.append(dict((variant, data["wall.time"]["mean"]) for variant, data in variants.items()))

            results_tables.append(E.H2(python))
            results_table = E.TABLE(
                E.CLASS("table is-hoverable"),
                E.THEAD(
                    E.TH("Variant"),
                    E.TH("Iterations"),
                    E.TH("Instructions"),
                    E.TH("max.res.size min"),
                    E.TH("max.res.size mean"),
                    E.TH("max.res.size max"),
                    E.TH("max.res.size stdev"),
                    E.TH("wall.time min"),
                    E.TH("wall.time mean"),
                    E.TH("wall.time max"),
                    E.TH("wall.time stdev"),
                    E.TH("Python implementation"),
                    E.TH("System"),
                    E.TH("Node"),
                ),
                E.TBODY(),
            )
            for variant, data in variants.items():
                results_table.find("tbody").append(
                    E.TR(
                        E.TD(variant),
                        E.TD(float_to_str(data["iterations"])),
                        E.TD(float_to_str(data["instructions"])),
                        E.TD(float_to_str(data["max.res.size"]["min"])),
                        E.TD(float_to_str(data["max.res.size"]["mean"])),
                        E.TD(float_to_str(data["max.res.size"]["max"])),
                        E.TD(float_to_str(data["max.res.size"]["stdev"])),
                        E.TD(float_to_str(data["wall.time"]["min"])),
                        E.TD(float_to_str(data["wall.time"]["mean"])),
                        E.TD(float_to_str(data["wall.time"]["max"])),
                        E.TD(float_to_str(data["wall.time"]["stdev"])),
                        E.TD(data["python_implementation"]),
                        E.TD(data["system"]),
                        E.TD(data["node"]),
                    )
                )
            results_tables.append(results_table)

        instructions_img = build_multi_bar_figure(
            python_names, instructions, "Instructions", "{} - Instructions (mean)".format(suite)
        )
        max_res_size_img = build_multi_bar_figure(
            python_names, max_res_size, "max.res.size", "{} - max.res.size (mean)".format(suite)
        )
        wall_time_img = build_multi_bar_figure(
            python_names, max_res_size, "wall.time", "{} - wall.time (mean)".format(suite)
        )

        html.body.append(
            E.E.section(
                E.CLASS("section"),
                E.H1(E.CLASS("title"), "Suite: {}".format(suite)),
                E.DIV(
                    E.CLASS("columns is-multiline"),
                    E.DIV(
                        E.CLASS("column"),
                        E.IMG(src="data:image/png;base64,{}".format(instructions_img.decode())),
                    ),
                    E.DIV(
                        E.CLASS("column"),
                        E.IMG(src="data:image/png;base64,{}".format(max_res_size_img.decode())),
                    ),
                    E.DIV(
                        E.CLASS("column"),
                        E.IMG(src="data:image/png;base64,{}".format(wall_time_img.decode())),
                    ),
                ),
                E.E.details(
                    E.E.summary("Results table"),
                    *results_tables,
                ),
                E.E.details(
                    E.E.summary("Results JSON"),
                    E.DIV(
                        E.CLASS("box"),
                        E.PRE(
                            E.CODE(
                                E.CLASS("language-json"),
                                json.dumps(pythons, indent=4),
                            ),
                        ),
                    ),
                ),
            )
        )

    out_html = os.path.join(base_dir, "index.html")
    with open(out_html, "wb") as fp:
        fp.write(lxml.html.tostring(html))
    return out_html


def write_csv(base_dir, data):
    # type: (str, typing.Dict[str, typing.Any]) -> str

    csv_headings = (
        "Timestamp",
        "Suite",
        "Implementation",
        "Python",
        "Variant",
        "Iterations",
        "Instructions",
        "max.res.size min",
        "max.res.size mean",
        "max.res.size max",
        "max.res.size stdev",
        "System",
        "Node",
    )
    out_csv = os.path.join(base_dir, "combined.csv")
    with open(out_csv, "w") as fp:
        w = csv.writer(fp)
        w.writerow(csv_headings)

        for suite, pythons in data.items():
            for python_version, variants in sorted(pythons.items()):
                for i, (variant, results) in enumerate(sorted(variants.items())):
                    py = python_version if i == 0 else ""

                    w.writerow(
                        (
                            datetime.datetime.fromtimestamp(results["timestamp"]).isoformat(),
                            suite,
                            results["python_implementation"],
                            python_version,
                            results["iterations"],
                            results["instructions"],
                            results["max.res.size"]["min"],
                            results["max.res.size"]["mean"],
                            results["max.res.size"]["max"],
                            results["max.res.size"]["stdev"],
                            results["system"],
                            results["node"],
                        )
                    )
    return out_csv


def main(base_dir):
    # type: (str) -> None
    results_by_suite_python_variant = collections.defaultdict(lambda: collections.defaultdict(dict))

    for fname in glob.glob(os.path.join(base_dir, "results-*.json")):
        with open(fname) as fp:
            data = json.load(fp)

        for suite, variants in data["suites"].items():
            for variant, variant_data in variants.items():
                metrics = collections.defaultdict(list)
                for iteration in variant_data["iterations"]:
                    for metric, value in iteration.items():
                        metrics[metric].append(value)

                python_version = "{}.{}.{}".format(
                    data["python"]["major"], data["python"]["minor"], data["python"]["micro"]
                )
                system = "{} {} {}".format(
                    data["platform"]["system"], data["platform"]["machine"], data["platform"]["release"]
                )

                # If we have already processed results for this suite/python/variant
                #   keep the most recent results
                if variant in results_by_suite_python_variant[suite][python_version]:
                    if data["timestamp"] < results_by_suite_python_variant[suite][python_version][variant]["timestamp"]:
                        continue

                results = dict(
                    timestamp=data["timestamp"],
                    suite=suite,
                    variant=variant,
                    python_version=python_version,
                    python_implementation=data["python"]["name"],
                    system=system,
                    node=data["platform"]["node"],
                    iterations=len(variant_data["iterations"]),
                    instructions=variant_data["instructions"],
                )

                for metric, values in metrics.items():
                    if len(values) > 1:
                        mean = statistics.fmean(values)
                        stdev = statistics.stdev(values)
                    else:
                        mean = values[0]
                        stdev = 0

                    results[metric] = dict(
                        min=min(values),
                        max=max(values),
                        mean=mean,
                        stdev=stdev,
                        raw=values,
                    )

                results_by_suite_python_variant[suite][python_version][variant] = results

    print("Results JSON: {}".format(write_json(base_dir, results_by_suite_python_variant)))
    print("Results CSV: {}".format(write_csv(base_dir, results_by_suite_python_variant)))
    print("Results HTML: {}".format(write_html(base_dir, results_by_suite_python_variant)))
    print_results(results_by_suite_python_variant)


if __name__ == "__main__":
    base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "results"))
    main(base_dir)
